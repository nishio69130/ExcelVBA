Option Explicit

'--- 共通変数の設定 ---
Const SHEET_NAME_DATA_PASTE As String = "データ貼付"
Const SHEET_NAME_SAMPLE_INFO As String = "検体情報"
Const SHEET_NAME_ITEM_INFO As String = "項目情報"
Const SHEET_NAME_ITEM_ALL_INFO As String = "全項目情報"

Const SHEET_NAME_PROCESS_TARGET As String = "処理対象"
Const SHEET_NAME_PROCESSED As String = "処理済"
Const SHEET_NAME_HISTORY As String = "処理対象移動済"
Const SHEET_NAME_CoSMOS_INFO As String = "データ貼付"

Const FOLDER_PATH_ITEM_INFO As String = "\\172.24.36.43\disk\【【２グループ専用】】\RPA\新WEB-RPA検討中\一時保存\"

Const FOLDER_PATH_PROCESSED As String = "\\172.24.36.43\disk\【【２グループ専用】】\RPA\新WEB-RPA検討中\処理後CSV\"
Const FILE_NAME_PROCESSED_CSV As String = "WEB-RPA処理後.csv"

Const FOLDER_PATH_CoSMOS_DATA As String = "\\172.24.36.43\disk\【【２グループ専用】】\RPA\新WEB-RPA検討中\CoSMOS予約受付中\"


Sub データ貼付シートの入力内容削除()
    dataAllDelete SHEET_NAME_DATA_PASTE   ' 「データ貼付」シートのデータを削除
End Sub

' 指定されたシート名の全セルをクリアする共通マクロ
Sub dataAllDelete(sheetName As String)
    Dim wsSource As Worksheet
    Set wsSource = ThisWorkbook.Sheets(sheetName) ' 指定されたシートを取得
    wsSource.Cells.Clear                          ' シート全体をクリア
End Sub

Sub 検体情報シートの入力内容削除()
    With ThisWorkbook.Sheets(SHEET_NAME_SAMPLE_INFO)
        .Range("B1").Value = ""                     ' B1セルをクリア
        .Range(.Cells(4, 1), .Cells(1000, 12)).Value = ""  ' A4:G1000範囲をクリア
    End With
End Sub

Sub 項目情報シート削除()
    With ThisWorkbook.Sheets(SHEET_NAME_ITEM_INFO)
        .Range("B1").Value = ""                     ' B1セルをクリア
        .Range("B2").Value = ""                     ' B2セルをクリア
        .Range(.Cells(4, 1), .Cells(1000, 24)).Value = ""  ' A4:X1000範囲をクリア
    End With
End Sub

Sub CoSMOSデータをデータ貼付シートへ貼付()
    Application.Wait Now + TimeValue("00:00:03")
    ThisWorkbook.Sheets(SHEET_NAME_DATA_PASTE).Cells(1, 1).PasteSpecial Paste:=xlPasteAll   ' 「データ貼付」シートのA1セルにクリップボード内容を貼り付け
End Sub

Sub 項目情報貼付()
    Application.Wait Now + TimeValue("00:00:03")
    ThisWorkbook.Sheets(SHEET_NAME_ITEM_INFO).Cells(4, 1).PasteSpecial Paste:=xlPasteAll   ' 「項目情報」シートのA4セルにクリップボード内容を貼り付け
End Sub



Sub SaveSheetAsUTF8CSV(sheetName As String, folderPath As String, fileNameFormat As String, Optional deleteExisting As Boolean = False)
    Dim ws As Worksheet
    Dim fileName As String
    Dim fullPath As String
    Dim tempPath As String
    Dim fso As Object
    Dim ts As Object
    Dim fileData As String
    Dim fileStream As Object

    ' 保存対象のシートを設定
    Set ws = ThisWorkbook.Sheets(sheetName)
   
    ' ファイル名を指定のフォーマットに基づいて作成
    fileName = fileNameFormat
    fullPath = folderPath & fileName
    tempPath = folderPath & "temp_output.csv"
   
    ' 同名ファイルが存在し、削除オプションがTrueの場合は削除
    If deleteExisting Then
        On Error Resume Next
        Kill fullPath
        On Error GoTo 0
    End If

    ' 一時ファイルとしてShift-JISで保存
    Application.DisplayAlerts = False
    ws.Copy
    ActiveWorkbook.SaveAs fileName:=tempPath, FileFormat:=xlCSV, Local:=True
    ActiveWorkbook.Close SaveChanges:=False
    Application.DisplayAlerts = True

    ' UTF-8形式で再保存
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.OpenTextFile(tempPath, 1, False, -2) ' Shift-JISで読み込み
    fileData = ts.ReadAll
    ts.Close
    Kill tempPath  ' 一時ファイルを削除

    Set fileStream = CreateObject("ADODB.Stream")
    With fileStream
        .Type = 2  ' テキストモード
        .Charset = "UTF-8"  ' UTF-8形式でエンコード
        .Open
        .WriteText fileData
        .SaveToFile fullPath, 2 ' UTF-8形式で保存
        .Close
    End With
End Sub

Sub 各項目情報CSV保存()
    SaveSheetAsUTF8CSV SHEET_NAME_ITEM_INFO, FOLDER_PATH_ITEM_INFO, _
        ThisWorkbook.Sheets(SHEET_NAME_ITEM_INFO).Range("B1").Value & "_" & Format(ThisWorkbook.Sheets(SHEET_NAME_ITEM_INFO).Range("B2").Value, "000") & "項目検体毎情報.csv"
End Sub

Sub 全項目情報CSV保存()
    SaveSheetAsUTF8CSV SHEET_NAME_ITEM_ALL_INFO, FOLDER_PATH_ITEM_INFO, _
        ThisWorkbook.Sheets(SHEET_NAME_ITEM_ALL_INFO).Range("B1").Value & "_" & "項目情報.csv"
End Sub

Sub 検体情報CSV保存()
    SaveSheetAsUTF8CSV SHEET_NAME_SAMPLE_INFO, FOLDER_PATH_ITEM_INFO, _
        ThisWorkbook.Sheets(SHEET_NAME_SAMPLE_INFO).Range("B1").Value & "_検体情報.csv"
End Sub

Sub CoSMOS情報CSV保存()
    SaveSheetAsUTF8CSV SHEET_NAME_CoSMOS_INFO, FOLDER_PATH_CoSMOS_DATA, "CoSMOS予約受付中.csv"
End Sub



Sub 処理対象データを処理済に転記してCSV保存()
    Dim wsTarget As Worksheet
    Dim wsProcessed As Worksheet
    Dim targetData As Range
    Dim lastRow As Long
    
    ' シートの設定
    Set wsTarget = ThisWorkbook.Sheets(SHEET_NAME_PROCESS_TARGET)
    Set wsProcessed = ThisWorkbook.Sheets(SHEET_NAME_PROCESSED)
    
    ' ①「処理対象」シートの2行目のデータを「処理済」シートのA列最終行の1行下にコピー
    Set targetData = wsTarget.Rows(2)
    lastRow = wsProcessed.Cells(wsProcessed.Rows.Count, "A").End(xlUp).Row + 1
    wsProcessed.Rows(lastRow).Value = targetData.Value
    
    ' ②「処理対象」シートの2行目を削除
    wsTarget.Rows(2).Delete Shift:=xlUp
    
    ' ③「処理済」シートを指定のフォルダにCSVとして保存
    SaveSheetAsUTF8CSV SHEET_NAME_PROCESSED, FOLDER_PATH_PROCESSED, FILE_NAME_PROCESSED_CSV, True
End Sub



Sub 処理対象シートへ転記()
    ' 画面更新をオフにして処理速度を向上
    Application.ScreenUpdating = False
    
    ' --- ワークシートの宣言と設定 ---
    Dim wsSource As Worksheet    ' データ貼付シート（元データシート）
    Dim wsHistory As Worksheet   ' 履歴シート（過去の処理記録）
    Dim wsTarget As Worksheet    ' 処理対象シート（これから処理するデータの出力先）

    Set wsSource = ThisWorkbook.Sheets(SHEET_NAME_DATA_PASTE)
    Set wsHistory = ThisWorkbook.Sheets(SHEET_NAME_HISTORY)
    Set wsTarget = ThisWorkbook.Sheets(SHEET_NAME_PROCESS_TARGET)

    ' --- データと配列の宣言 ---
    Dim sourceData As Variant    ' データ貼付シートのデータ
    Dim historyData As Variant   ' 履歴シートのデータ（重複チェック用）
    Dim outputData() As Variant  ' 出力データのための配列

    ' --- 最終行の取得 ---
    Dim sourceLastRow As Long    ' データ貼付シートの最終行
    Dim historyLastRow As Long   ' 履歴シートの最終行

    sourceLastRow = wsSource.Cells(wsSource.Rows.Count, "B").End(xlUp).Row
    historyLastRow = wsHistory.Cells(wsHistory.Rows.Count, "A").End(xlUp).Row

    ' --- 各種変数の宣言 ---
    Dim i As Long, j As Long
    Dim found As Boolean         ' 重複チェック用のフラグ
    Dim outputRow As Long        ' 出力行のカウンタ
    Dim sourceColumns As Variant ' データ貼付シートから取得する列
    Dim colIndex As Long
    Dim currentDateTime As String ' 現在日時の格納

    ' --- コピーする列の設定 ---
    sourceColumns = Array("B", "C", "E", "F", "G", "J", "K") ' 必要な列のみ設定

    ' --- データの取得（2行目以降） ---
    sourceData = wsSource.Range("B2:B" & sourceLastRow).Value ' データ貼付シートのB列データ（2行目以降）

    ' --- 初回処理：履歴が空の場合、全データを処理対象に転記 ---
    If historyLastRow < 2 Then
        outputRow = 1
        ReDim outputData(1 To UBound(sourceData, 1), 1 To UBound(sourceColumns) + 1)
       
        ' データ貼付シートのデータを処理対象に追加
        For i = 1 To UBound(sourceData, 1)
            For colIndex = LBound(sourceColumns) To UBound(sourceColumns)
                outputData(outputRow, colIndex + 1) = wsSource.Cells(i + 1, Columns(sourceColumns(colIndex)).Column).Value ' +1 to adjust for row offset
            Next colIndex
            outputRow = outputRow + 1
        Next i

    ' --- 通常処理：履歴にデータがある場合は重複チェック ---
    Else
        historyData = wsHistory.Range("A1:A" & historyLastRow).Value ' 履歴データを取得
        ReDim outputData(1 To UBound(sourceData, 1), 1 To UBound(sourceColumns) + 1)
       
        outputRow = 1
        ' 各行をチェックして履歴にないデータのみを抽出
        For i = 1 To UBound(sourceData, 1)
            found = False

            ' 重複チェック
            For j = 1 To UBound(historyData, 1)
                If sourceData(i, 1) = historyData(j, 1) Then
                    found = True
                    Exit For
                End If
            Next j

            ' 重複しないデータを出力データに追加
            If Not found Then
                For colIndex = LBound(sourceColumns) To UBound(sourceColumns)
                    outputData(outputRow, colIndex + 1) = wsSource.Cells(i + 1, Columns(sourceColumns(colIndex)).Column).Value ' +1 to adjust for row offset
                Next colIndex
                outputRow = outputRow + 1
            End If
        Next i

        ' 特別処理：全データが重複した場合、特定の値を追加
        If outputRow = 1 Then
            outputData(outputRow, 1) = "99999999"
            outputRow = outputRow + 1
        End If
    End If

    ' --- 処理対象シートにデータを貼り付け（A列の最終行の1行下に） ---
    If outputRow > 1 Then
        Dim targetLastRow As Long
        targetLastRow = wsTarget.Cells(wsTarget.Rows.Count, "A").End(xlUp).Row + 1
        wsTarget.Range("A" & targetLastRow).Resize(outputRow - 1, UBound(sourceColumns) + 1).Value = outputData
    End If

    ' --- 現在の日時を取得 ---
    currentDateTime = Format(Now, "yyyy/mm/dd hh:nn:ss")

    ' --- 処理対象シートのデータを履歴シートに転記 ---
    If outputRow > 1 Then
        wsHistory.Cells(historyLastRow + 1, 1).Resize(outputRow - 1, 1).Value = wsTarget.Range("A" & targetLastRow).Resize(outputRow - 1, 1).Value
        wsHistory.Cells(historyLastRow + 1, 2).Resize(outputRow - 1, 1).Value = currentDateTime
    End If
    
    ' 画面更新を再度オンにする
    Application.ScreenUpdating = True
End Sub




' --- コードの内容 ---
' このコードは、データ貼付シートからのデータを履歴シートのデータと照合し、
' 重複しないデータを処理対象シートに転記するためのものです。
'
' 1. 初めに、3つのシート（データ貼付、履歴、処理対象）を指定し、データの最終行を取得します。
' 2. 次に、履歴シートが空かどうかを判定し、空の場合はデータ貼付シートのすべてのデータを処理対象シートに転記します。
' 3. 履歴にデータが存在する場合、履歴と重複しないデータのみを処理対象に追加するため、
'    各行ごとに履歴データと比較し、重複していない行を抽出して転記します。
' 4. 重複しないデータが1件もない場合は、特別な印として "99999999" という値を出力します。
' 5. 最後に、処理対象シートに転記したデータを履歴シートに追加し、日時を記録することで履歴を更新します。
'
' 各コード行に対応する変数や配列を使うことで、効率的にデータの抽出と転記を行い、
' 今後のRPA処理に役立つ情報を処理対象シートに転記する仕組みです。

' --- コードの詳細な解説 ---
' このコードで使用している VBA の特定の構文について、初心者向けに詳細に解説します。

' 1. `UBound` と `LBound` の使い方
'    `UBound` と `LBound` は VBA の配列でよく使われる関数で、それぞれ「最大インデックス」と「最小インデックス」
'    を取得するために使用します。
'
'    例えば、以下のような配列があったとします。
'    Dim arr As Variant
'    arr = Array("A", "B", "C")
'
'    この配列のインデックス範囲は最小が「0」、最大が「2」です。
'    - `LBound(arr)` は「0」を返します（最小インデックス）。
'    - `UBound(arr)` は「2」を返します（最大インデックス）。
'
'    このコードでは、次のように `UBound` や `LBound` を使って配列の範囲を取得しています。
'    For colIndex = LBound(sourceColumns) To UBound(sourceColumns)
'    この行は、`sourceColumns` 配列の最初のインデックスから最後のインデックスまで順に処理を行うための構文です。
'    こうすることで、配列のサイズが変わっても対応できる柔軟なコードになります。

' 2. `ReDim` と動的配列の使い方
'    VBA の配列は、あらかじめサイズを指定しなくても `ReDim` を使ってサイズを後から設定できます。
'    このような配列を「動的配列」と呼びます。
'
'    例えば、このコードの中で `outputData` 配列のサイズを次のように設定しています。
'    ReDim outputData(1 To UBound(sourceData, 1), 1 To UBound(targetColumns) + 1)
'
'    `ReDim` は新しい配列のサイズを指定するためのキーワードです。
'    - `1 To UBound(sourceData, 1)` は、配列の行数を `sourceData` と同じにしています。
'      `sourceData` の行数に合わせて、`outputData` 配列も同じ行数で作成することができます。
'    - `1 To UBound(targetColumns) + 1` は、配列の列数を `targetColumns` の数に 1 を加えた数に設定しています。
'      これは、転記先シートの列に合わせたサイズです。

' 3. `wsSource.Cells(i, Columns(sourceColumns(colIndex)).Column).Value` の解説
'    この行は、`sourceColumns` 配列で指定された列（例：B 列や C 列）からデータを取り出すためのコードです。
'
'    `wsSource.Cells(i, Columns(sourceColumns(colIndex)).Column).Value` は順を追って分解すると以下のようになります：
'
'    - `sourceColumns(colIndex)`：この部分は、`sourceColumns` 配列の中から `colIndex` に対応する要素を取り出します。
'      例えば、`sourceColumns` 配列が `Array("B", "C", "E")` の場合、`colIndex = 0` のときは "B" が、
'      `colIndex = 1` のときは "C" が返されます。
'
'    - `Columns(sourceColumns(colIndex)).Column`：この部分は、列文字を列番号に変換する部分です。
'      例えば、`sourceColumns(colIndex)` が "B" の場合、`Columns("B").Column` は列番号 2 を返します。
'
'    - `wsSource.Cells(i, 2).Value` のように、列番号に変換された状態で使うと、「i 行目」の「2 列目」（つまり B 列）の値を取得します。
'
'    こうすることで、複数の列（B 列、C 列、E 列など）からデータを柔軟に取得し、`outputData` 配列に入れることができます。
'
'    まとめると、このコードは `sourceColumns` 配列で指定された列からデータを順に取り出し、それを `outputData` 配列に
'    格納して、後で処理対象シートに転記するために使っています。

' 配列を利用した範囲操作や `ReDim` の使い方は、Excel VBA における効率的なデータ処理に非常に役立ちます。
' このコードでは、動的配列や条件分岐を使って柔軟にデータの抽出と転記を実現しています。
'
' 4. `If` 文による分岐処理（初回処理と通常処理の違い）
'    このコードでは、履歴シート（wsHistory）が空かどうかによって処理を分岐しています。
'
'    - `If historyLastRow < 2 Then` の条件では、履歴シートが空（またはほぼ空）かを確認しています。
'      `historyLastRow` が `2` 未満の場合、履歴シートにはデータが存在しないとみなして初回処理を行います。
'
'    初回処理と通常処理で異なるのは、次の点です：
'
'    - 初回処理では、データ貼付シート（wsSource）の全データを `outputData` 配列に転記します。
'      重複チェックは必要なく、ループで `sourceColumns` の各列のデータをそのまま `outputData` に入れていきます。
'
'    - 通常処理では、履歴シートのデータ（historyData）を使って重複チェックを行います。
'      まず、履歴シートの A 列データを取得し、`historyData` 配列に格納します。
'      その後、`sourceData` 配列の各行を履歴シートのデータと照合し、重複が見つからないデータのみを `outputData` に追加します。
'      全てのデータが重複していた場合は、"99999999" という特別な値を追加する処理が含まれています。

' 5. `currentDateTime = Format(Now, "yyyy/mm/dd hh:nn:ss")`
'    `Now` 関数は、現在の日付と時刻を取得します。
'    `Format` 関数は、指定した形式に従って値を文字列に変換します。
'    この行では、`Now` で取得した現在の日時を「yyyy/mm/dd hh:nn:ss」という形式で文字列として `currentDateTime` に格納しています。
'    例として、2024年11月4日午後3時15分が取得された場合、この変数には「2024/11/04 15:15:00」という文字列が格納されます。

' 6. `Resize` の使い方
'    `Resize` は、指定したセル範囲のサイズを動的に変更するためのプロパティです。
'    例えば、以下のコード：
'    wsTarget.Range("A1").Resize(outputRow - 1, UBound(targetColumns) + 1).Value = outputData
'    は、A1セルから開始し、`outputRow - 1` 行分、`UBound(targetColumns) + 1` 列分の範囲に `outputData` の値を貼り付けています。
'    こうすることで、必要な範囲だけにデータを転記することができます。

' 7. `Exit For` の使い方
'    `Exit For` は、`For` ループを強制的に抜けるための命令です。
'    このコードでは、履歴シートのデータと一致するデータが見つかった場合に `Exit For` でループを終了し、
'    それ以上のチェックを行わないようにしています。
'    例えば、次の部分：
'    If sourceData(i, 1) = historyData(j, 1) Then
'        found = True
'        Exit For
'    End If
'    では、重複が見つかった時点で `found` フラグを `True` にし、`For` ループから抜けています。
'    これにより、効率的に重複チェックが行われ、無駄な処理を省けます。







Sub 項目情報データ取得()

    ' 画面更新を停止して処理を高速化
    Application.ScreenUpdating = False

    ' 変数の宣言
    Dim folderPath As String       ' フォルダパスを格納する変数
    Dim fileName As String         ' 各CSVファイルの名前を格納する変数
    Dim csvFile As Workbook        ' 開いたCSVファイルを格納する変数
    Dim mainSheet As Worksheet     ' メインシートを格納する変数
    Dim subSheet As Worksheet      ' サブシートを格納する変数
    Dim lastRow As Long            ' データの最終行を格納する変数
    Dim testNumber As Long         ' B1セルから取得する受付番号
    Dim idNumber As String         ' B2セルから取得する検体番号
    Dim dataRange As Range         ' CSVから取得するデータ範囲を格納する変数
    Dim pasteRow As Long           ' データ貼り付け開始行を格納する変数

    ' 処理対象フォルダのパスを設定
    folderPath = FOLDER_PATH_ITEM_INFO
    
    ' CSVファイルを貼り付けるメインシート（このVBAコードを仕込んでいるExcelのシート）を指定
    Set mainSheet = ThisWorkbook.Sheets("全項目情報")
    
    ' CSVファイルを貼り付けるサブシートを指定
    Set subSheet = ThisWorkbook.Sheets("検体毎項目情報")
    
    ' メインシートのデータ貼り付け開始行を初期化（2行目から貼り付け開始）
    pasteRow = 3
    
    ' 前回データの削除
    With mainSheet
        .Range("B1").Value = ""
        .Range(.Cells(pasteRow, 1), .Cells(1000, 25)).Value = ""
    End With
    
    With subSheet
        .Range(.Cells(2, 1), .Cells(1000, 24)).Value = ""
    End With

    ' 指定のフォルダ内のCSVファイルを検索し、処理する
    fileName = Dir(folderPath & "*項目検体毎情報.csv")
    
    Do While fileName <> ""
        
        ' CSVファイルを開く
        Set csvFile = Workbooks.Open(folderPath & fileName)
        
        ' B1セルにある数値（受付番号）を取得
        testNumber = csvFile.Sheets(1).Range("B1").Value
        
        ' B2セルにある数値（検体番号）を取得
        idNumber = csvFile.Sheets(1).Range("B2").Value
                
        ' 受付番号をB1セルへ入力
        mainSheet.Range("B1").Value = testNumber
        
        ' データの最終行を確認（5行目以降にデータがあるため、B列の最終行を基準とする）
        lastRow = csvFile.Sheets(1).Cells(Rows.Count, 2).End(xlUp).Row
        
        ' データを5行目から最終行まで取得（A列以降のデータを全て含む範囲）
        Set dataRange = csvFile.Sheets(1).Range("A5:X" & lastRow)
        
        ' 取得したデータをメインシートの貼り付け行に順に貼り付け
        ' B列にデータを貼り付け、A列に識別番号を挿入
        mainSheet.Range("B" & pasteRow).Resize(dataRange.Rows.Count, dataRange.Columns.Count).Value = dataRange.Value
        
        ' サブシートのA2セル以降にも同じデータを貼り付け
        subSheet.Range("A2").Resize(dataRange.Rows.Count, dataRange.Columns.Count).Value = dataRange.Value
        
        ' A列に識別番号を挿入（データの行数に合わせて設定）
        mainSheet.Range("A" & pasteRow & ":A" & pasteRow + dataRange.Rows.Count - 1).Value = idNumber
        
        ' 貼り付け行を次の行から開始するように更新
        pasteRow = pasteRow + dataRange.Rows.Count
        
        ' 開いたCSVファイルを閉じる（保存せずに）
        csvFile.Close False
        
        ' CSVファイルを削除する
        Kill folderPath & fileName
                
        判定結果入力
                
        ' 次のCSVファイルを取得
        fileName = Dir
    Loop

    ' 画面更新を再開
    Application.ScreenUpdating = True

End Sub






Sub 判定結果入力()

    Dim wsProcess As Worksheet
    Dim wsDetails As Worksheet
    Dim currentValueM2 As String
    Dim currentValueN2 As String
    Dim newValueM2 As String
    Dim newValueN2 As String
    Dim isUrgent As Boolean
    
    ' シートオブジェクトの取得
    Set wsProcess = ThisWorkbook.Sheets(SHEET_NAME_PROCESS_TARGET)
    Set wsDetails = ThisWorkbook.Sheets("判定詳細")
    
    ' シート「処理対象」のG2セルが「至急」かどうか
    isUrgent = (wsProcess.Range("G2").Value = "至急")
    
    ' 現在のM2、N2セルの値を取得
    currentValueM2 = wsProcess.Range("M2").Value
    currentValueN2 = wsProcess.Range("N2").Value
    
    ' シート「判定詳細」から新しいV3、V4セルの値を取得
    newValueM2 = wsDetails.Range("V3").Value
    newValueN2 = wsDetails.Range("V7").Value
    
    ' M2セルの更新ロジック
    If currentValueM2 <> newValueM2 Then
        ' 前回と今回の入力が異なる場合、"前回値 / 今回値" 形式にする
        If currentValueM2 = "" Then
            wsProcess.Range("M2").Value = newValueM2
        Else
            wsProcess.Range("M2").Value = currentValueM2 & " / " & newValueM2
        End If
    Else
        ' 一致する場合は、新しい値をそのまま入力
        wsProcess.Range("M2").Value = newValueM2
    End If
    
    ' N2セルの更新ロジック
    If currentValueN2 <> newValueN2 Then
        Dim values() As String
        Dim i As Integer
        Dim found As Boolean
        Dim updatedValue As String
        
        ' 現在のN2セルの値を分割して配列にする
        values = Split(currentValueN2, " / ")
        found = False
        
        ' 新しい値が既に含まれているかチェック
        For i = LBound(values) To UBound(values)
            If values(i) = newValueN2 Then
                found = True
                Exit For
            End If
        Next i
        
        ' 新しい値が含まれていない場合、追加して再結合
        If Not found Then
            updatedValue = currentValueN2
            If Len(updatedValue) > 0 Then updatedValue = updatedValue & " / "
            updatedValue = updatedValue & newValueN2
            wsProcess.Range("N2").Value = updatedValue
        End If
    Else
        ' 一致する場合は、新しい値をそのまま入力
        wsProcess.Range("N2").Value = newValueN2
    End If
    
    ' M2セルが「至急」の場合の更新
    If isUrgent Then
        Dim urgentPrefix As String
        urgentPrefix = "至急/ "
        
        ' 「至急/ 」が先頭についているか確認
        If Left(wsProcess.Range("M2").Value, Len(urgentPrefix)) <> urgentPrefix Then
            wsProcess.Range("M2").Value = urgentPrefix & wsProcess.Range("M2").Value
        End If
    End If
    
End Sub





